apiVersion: batch/v1
kind: Job
metadata:
  name: logs-$RAY_KUBE_CLUSTER_NAME
spec:
  # this defaults to one week
  ttlSecondsAfterFinished: ${CUSTODIAN_TTL_SECONDS-604800}

  template:
    metadata:
      name: logs-$RAY_KUBE_CLUSTER_NAME
      labels:
        app.kubernetes.io/component: logs
        app.kubernetes.io/managed-by: codeflare
        app.kubernetes.io/part-of: $RAY_KUBE_CLUSTER_NAME
        app.kubernetes.io/owner: ${USER-unknown}
    spec:
      restartPolicy: Never
      serviceAccountName: ray-self-destruct-v1-sa-${USER-genericuser}
      imagePullSecrets:
        - name: ${IMAGE_PULL_SECRET-none}
      containers:

      # collect logs and also manage helm delete upon job completion
      - name: logs
        image: $CUSTODIAN_IMAGE
        resources:
          limits:
            cpu: 50m
            memory: 32Mi
        command: [ "/bin/bash", "-c", "--" ]
        args:
          - |
            kubectl logs -f -l $KUBE_JOB_LOGS_LABEL_SELECTOR
            echo 'Job run is complete'
            sleep ${CUSTODIAN_DELETE_DELAY-10}
            echo 'Tearing down cluster, if needed'
            helm delete -n ${KUBE_NS_FOR_REAL-${KUBE_NS}} $RAY_KUBE_CLUSTER_NAME 2>&1 | grep -v 'Release not loaded' || exit 0

      # stream out cpu utilization metrics
      - name: cpu
        image: $CUSTODIAN_IMAGE
        resources:
          limits:
            cpu: 50m
            memory: 96Mi
        command: [ "/bin/bash", "-c", "--" ]
        args:
          - |
            echo -n $CPU_AWK_B64 | base64 -d > /tmp/cpu.awk
            echo -n $CPU_B64 | base64 -d > /tmp/cpu.sh
            chmod +x /tmp/cpu.sh
            /tmp/cpu.sh

      # stream out memory utilization metrics
      - name: memory
        image: $CUSTODIAN_IMAGE
        resources:
          limits:
            cpu: 50m
            memory: 96Mi
        command: [ "/bin/bash", "-c", "--" ]
        args:
          - |
            echo -n $MEMORY_AWK_B64 | base64 -d > /tmp/memory.awk
            echo -n $MEMORY_B64 | base64 -d > /tmp/memory.sh
            chmod +x /tmp/memory.sh
            /tmp/memory.sh

      # stream out gpu utilization metrics
      - name: gpu
        image: $CUSTODIAN_IMAGE
        resources:
          limits:
            cpu: 50m
            memory: 96Mi
        command: [ "/bin/bash", "-c", "--" ]
        args:
          - |
            echo -n $GPU_AWK_B64 | base64 -d > /tmp/gpu.awk
            echo -n $GPU_B64 | base64 -d > /tmp/gpu.sh
            chmod +x /tmp/gpu.sh
            if [[ "${NUM_GPUS-0}" != "0" ]]; then /tmp/gpu.sh; else echo "# No GPUs for this run"; fi
            
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ray-self-destruct-v1-sa-${USER-genericuser}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ray-self-destruct-v1-role-${USER-genericuser}
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "serviceaccounts", "services", "configmaps"]
  verbs: ["get", "list", "delete"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "delete", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["get", "list", "delete"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ray-self-destruct-v1-rb-${USER-genericuser}
subjects:
- kind: ServiceAccount
  name: ray-self-destruct-v1-sa-${USER-genericuser}
roleRef:
  kind: Role
  name: ray-self-destruct-v1-role-${USER-genericuser}
  apiGroup: rbac.authorization.k8s.io
