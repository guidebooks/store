apiVersion: batch/v1
kind: Job
metadata:
  name: logs-$RAY_KUBE_CLUSTER_NAME
spec:
  ttlSecondsAfterFinished: 604800 # one week
  template:
    metadata:
      name: logs-$RAY_KUBE_CLUSTER_NAME
      labels:
        app.kubernetes.io/part-of: $RAY_KUBE_CLUSTER_NAME
        app.kubernetes.io/component: logs
    spec:
      restartPolicy: Never
      serviceAccountName: ray-self-destruct-v1-sa-${USER-genericuser}
      imagePullSecrets:
        - name: ${IMAGE_PULL_SECRET-none}
      # securityContext:
      #   seccompProfile:
      #     type: RuntimeDefault
      containers:
      - name: custodian
        image: $RAY_IMAGE
        env:
          - name: RAY_ADDRESS
            value: ray-head-$RAY_KUBE_CLUSTER_NAME:6379
        # securityContext:
        #   runAsNonRoot: true
        #   allowPrivilegeEscalation: false
        #   capabilities:
        #     drop:
        #       - ALL
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
        command: [ "/bin/bash", "-c", "--" ]
        args:
          - "echo 'Installing Helm'; cd /tmp; mkdir -p /tmp/captured/logs; mkdir /tmp/bin; wget -q -O get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3; chmod 700 get_helm.sh; HELM_INSTALL_DIR=/tmp/bin PATH=/tmp/bin:$PATH ./get_helm.sh --no-sudo; until ray job status $JOB_ID | grep -iE running\\\|succeeded\\\|failed\\\|stopped; do if /tmp/bin/helm status -n ${KUBE_NS_FOR_REAL-${KUBE_NS}} $RAY_KUBE_CLUSTER_NAME > /dev/null ; then echo 'Helm chart is still valid'; else echo 'Exiting, as it seems there is nothing to do'; exit; fi; echo 'Waiting for job to start'; sleep 1; done; ray job logs -f $JOB_ID | tee /tmp/captured/logs/job.txt; sleep ${RAY_SELFDESTRUCT_DELAY-10}; /tmp/bin/helm delete -n ${KUBE_NS_FOR_REAL-${KUBE_NS}} $RAY_KUBE_CLUSTER_NAME 2>&1 | grep -v 'Release not loaded' || exit 0"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ray-self-destruct-v1-sa-${USER-genericuser}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ray-self-destruct-v1-role-${USER-genericuser}
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "serviceaccounts", "services", "configmaps"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "delete", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["get", "list", "delete"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ray-self-destruct-v1-rb-${USER-genericuser}
subjects:
- kind: ServiceAccount
  name: ray-self-destruct-v1-sa-${USER-genericuser}
roleRef:
  kind: Role
  name: ray-self-destruct-v1-role-${USER-genericuser}
  apiGroup: rbac.authorization.k8s.io
